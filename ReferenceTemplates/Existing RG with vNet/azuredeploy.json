{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "vmname": {
      "type": "string",
      "defaultValue": "winvm01",
      "metadata": {
        "Description": "Type in the name of the virtual machine"
      }
    },
    "storageaccountname": {
      "type": "string",
      "defaultValue": "newstor",
      "metadata": {
        "Description": "Assing a storage account name. This will generate a unique storage account name"
      }
    },
    "storagetype": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS"
      ],
      "metadata": {
        "Description": "Specify the storage type for your storage account"
      }
    },
    "vNetResourceGroup": {
      "type": "string",
      "metadata": {
        "Description": "Type name of existing Resource Group containing the vNet"
      }
    },
    "vnetname": {
      "type": "string",
      "metadata": {
        "Description": "Type the name of the existing vnet within the resource group"
      }
    },
    "subnetname": {
      "type": "string",
      "metadata": {
        "Description": "Type the name of the existing subnet within the vnet"
      }
    },
    "adminuser": {
      "type": "string",
      "defaultValue": "azureadmin",
      "metadata": {
        "Description": "name of the admin user account"
      }
    },
    "password": {
      "type": "securestring",
      "metadata": {
        "Description": "assing a secure password for the admin user"
      }
    }
  },
  "variables": {
    "storagename": "[toLower(concat(parameters('storageaccountname'), uniqueString(resourceGroup().id)))]",
    "vmsize": "Standard_A2",
    "vnetID": "[resourceId(parameters('vNetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetname'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', parameters('subnetname'))]",
    "apiVersion": {
      "Compute": {
        "VirtualMachines": "2015-06-15",
        "Extensions": "2015-06-15"
      },
      "Storage": {
        "storageAccounts": "2015-06-15"
      },
      "network": {
        "virtualnetworks": "2015-06-15",
        "publicIPaddress": "2015-06-15",
        "networkinterface": "2015-06-15"
      }
    },
    "nicname": "nic1",
    "publicnicname": "PIP1",
    "osType": {
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2012-R2-Datacenter"
    },
    "ipallocation": "Dynamic",
    "extensionname": "CustomScriptExtension"
  },
  "resources": [
    {
      "apiVersion": "[variables('ApiVersion').storage.storageaccounts]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "name": "[variables('storagename')]",
      "properties": {
        "accountType": "[parameters('storagetype')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersion').network.networkinterface]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicname')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicnicname'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicnicname'))]"
              },
              "subnet": {
                "id": "[variables('subnetref')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiversion').network.publicipaddress]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicnicname')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('vmname'))]"
        }
      }
    },
    {
      "apiVersion": "[variables('apiversion').compute.virtualmachines]",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[parameters('vmname')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicname'))]",
        "[concat('Microsoft.Storage/StorageAccounts/', variables('storagename'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "osProfile": {
          "adminPassword": "[parameters('password')]",
          "adminUsername": "[parameters('adminuser')]",
          "computerName": "[parameters('vmname')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": true,
            "provisionVMAgent": true
          }
        },
        "storageProfile": {
          "osDisk": {
            "createOption": "fromImage",
            "name": "[parameters('vmname')]",
            "caching": "readWrite",
            "vhd": {
              "uri": "[concat('http://', variables('storagename'), '.blob.core.windows.net/', 'vhds', '/', 'myvm.vhd')]"
            }
          },
          "imageReference": {
            "offer": "[variables('osType').offer]",
            "publisher": "[variables('osType').publisher]",
            "sku": "[variables('osType').sku]",
            "version": "latest"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicname'))]"
            }
          ]
        }
      }
    }
  ]
}
